#+TITLE: My .emacs by Org-dotemacs

* Dotemacs

** Gnus Gmail
   Ref: [[https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/gnus-guide-en.org#introduction][A Practical Guide to Gnus by Chen Bin]]

* Custom Code
#+BEGIN_SRC emacs-lisp 
;; ---- Begin: Custom defined variables

(message (concat "var mal-var-homedir            - " mal-var-homedir            ))
(message (concat "var mal-var-emacsdir           - " mal-var-emacsdir           ))
(message (concat "var mal-var-emacs-backupdir    - " mal-var-emacs-backupdir    ))
(message (concat "var mal-var-dotemacslib        - " mal-var-dotemacslib        ))
(message (concat "var mal-var-dotemacsfile       - " mal-var-dotemacsfile       ))
(message (concat "var mal-var-dotfilesdir        - " mal-var-dotfilesdir        ))
(message (concat "var mal-var-dotemacsdir        - " mal-var-dotemacsdir        ))
(message (concat "var mal-var-dotfile-emacs      - " mal-var-dotfile-emacs      ))
(message (concat "var mal-var-dotfile-dotemacs   - " mal-var-dotfile-dotemacs   ))
(message (concat "var mal-var-dotfile-alias      - " mal-var-dotfile-alias      ))
(message (concat "var mal-var-dotfile-faces      - " mal-var-dotfile-faces      ))
(message (concat "var mal-var-dotfile-functions  - " mal-var-dotfile-functions  ))
(message (concat "var mal-var-dotfile-inbox      - " mal-var-dotfile-inbox      ))
(message (concat "var mal-var-dotfile-index      - " mal-var-dotfile-index      ))
(message (concat "var mal-var-dotfile-keybindings- " mal-var-dotfile-keybindings))
(message (concat "var mal-var-dotfile-menu       - " mal-var-dotfile-menu       ))
(message (concat "var mal-var-dotfile-org-mode   - " mal-var-dotfile-org-mode   ))

;; ---- End: Custom defined variables

  ;;-----------------------------------------------
  ;; Custom variables for E-mail
  ;;-----------------------------------------------
  (custom-set-variables 
   '(user-full-name "Ricardo Malnati"            )
   '(user-mail-address "ricardomalnati@gmail.com")
   )
  ;;-----------------------------------------------
  ;; Custom variables for org-dotemacs loading
  ;;-----------------------------------------------
   (org-dotemacs-load-file nil mal-var-dotfile-alias      )
   (org-dotemacs-load-file nil mal-var-dotfile-faces      )
   (org-dotemacs-load-file nil mal-var-dotfile-functions  )
   (org-dotemacs-load-file nil mal-var-dotfile-keybindings)
   (org-dotemacs-load-file nil mal-var-dotfile-org-mode   )
  ;;-----------------------------------------------
  ;; Custom variables for backup
  ;;-----------------------------------------------
  (setq backup-directory-alist '( ("." . mal-var-backupsdir ))) 
  (custom-set-variables 
   '(desktop-save-mode t) 
   '(desktop-save t)
   ;; use only one desktop
   ;'(desktop-path emacsdir)
   ;'(desktop-dirname emacsdir)
   '(desktop-base-file-name "emacs-desktop")
   '(history-length 2048)
   '(command-history-hook nil)
   '(completions-file-versions-kept 9992)
   '(delete-auto-save-files nil)
   '(delete-by-moving-to-trash t)
   '(list-command-history-max 2048)
   '(term-buffer-maximum-size 8192)
   '(auto-save-interval 100)
   '(auto-save-visited-file-name t)
   '(undo-limit 9999999999999999)
   '(undo-outer-limit 99999999999999999)
   '(undo-strong-limit 9999999999999999)
   '(undo-ask-before-discard t)
  )
  ;;sync everytime that save
  (add-hook 'after-save-hook #'mal-fn-syncdotfiles)
  
  ;;-----------------------------------------------
  ;; Custom variables for appearance
  ;;-----------------------------------------------
  (custom-set-variables
   '(yank-menu-length 32)
   '(buffers-menu-buffer-name-length 64)
   '(buffers-menu-max-size 32)
   '(global-set-key [3 100] t)
   '(hl-line-sticky-flag nil)
   '(indicate-empty-lines t)
   '(mouse-wheel-scroll-amount (quote (3 ((shift) . 1) ((control)))))
   '(fset (quote yes-or-no-p) t)
   '(inhibit-startup-buffer-menu nil)
   '(initial-buffer-choice t)
   '(muse-project-alist nil)
   '(org-startup-folded t)
   '(tooltip-reuse-hidden-frame t)
   '(package-enable-at-startup t)
  )
  (with-eval-after-load 'org
   (org-babel-do-load-languages 
    'org-babel-load-languages 
    '(
      (shell . t)
      (dot . t)
      (plantuml . t)
     )
   )
  ) ;; org-mode blocks
;;  (setq org-plantuml-jar-path
;;   (expand-file-name (concat 'string path ".emacs.d/plantuml.jar"))) ;; PlantUML executable.
  ;; You must use absolute path for using Reveal.js loading locally.
;  (setq org-reveal-root (concat "file://" (path) ".emacs.d/reveal.js"))
  ;;; When opening a file that is a symbolic link, don't ask whether I
  ;;; want to follow the link. Just do it
  (setq find-file-visit-truename t)
  ;; Turn off alarms completely
  (setq ring-bell-function 'ignore)
  (custom-set-variables 
   '(command-history-hook nil)
   '(completions-file-versions-kept 9992)
   '(delete-auto-save-files nil)
   '(delete-by-moving-to-trash t)
   '(list-command-history-max 2048)
   '(term-buffer-maximum-size 8192)
   '(auto-save-interval 100)
   '(auto-save-visited-file-name t)
   '(undo-limit 9999999999999999)
   '(undo-outer-limit 99999999999999999)
   '(undo-strong-limit 9999999999999999)
   '(undo-ask-before-discard t)
  )

  ;;-----------------------------------------------
  ;; Custom variables for initialize mode's
  ;;-----------------------------------------------
  (custom-set-variables
   '(beacon-mode t)
   '(recentf-mode 1)
   '(term-char-mode-buffer-read-only nil)
   '(tool-bar-mode t)
   '(window-divider-mode t)
   '(zoom-mode t)
   '(save-place-mode t)
   '(show-paren-mode t)
   '(column-number-mode t)
   '(fringe-mode (quote (1 . 1)) nil (fringe))
   '(global-display-line-numbers-mode t)
   '(global-hl-line-mode t)
   '(global-visual-line-mode t)
   '(icomplete-mode t)
   '(expand-region t)
   '(subword-mode t) ;; Treats CamelCase as distinct words
   '(setq-default indent-tabs-mode nil) ;; Make sure spaces are used when indenting code
   '(pending-delete-mode t)
  )
  (add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode) 
			        '("\\.\\(org\\  |org_archive\\|txt\\)$" . org-mode)) ;add-to-list
  (require 'ob-dot)
  (require 'ox-reveal)

  ;;-----------------------------------------------
  ;; Custom variables for preferences
  ;;-----------------------------------------------
  (custom-set-variables 
   '(org-html-html5-fancy nil)
   '(rectangle-preview t)
   '(tool-bar-position (quote top))
   '(buffers-menu-show-directories t)
   '(doc-view-continuous t)
;;   '(minibuffer-frame-alist (quote ((width . 360) (height . 2))))
   '(display-buffer-reuse-frames t)
   '(display-line-numbers t)
   ;;'(fit-frame-to-buffer nil)
   '(global-hl-line-sticky-flag t)
   '(beacon-color "gold")
   '(custom-enabled-themes (quote (wombat)))
   '(window-divider-default-bottom-width 1)
   '(window-divider-default-right-width 1)
   '(x-gtk-show-hidden-files t)
   '(x-stretch-cursor t)
;;   '(2C-autoscroll nil)
;;   '(2C-window-width 360)
   '(initial-frame-alist
     (quote
      ((tool-bar-position . none)
       (bottom-divider-width . 1)
       (right-divider-width .  1))))
   '(default-frame-alist 
     (quote 
      ((tool-bar-position . none)
       (bottom-divider-width . 1)
       (right-divider-width .  1))))
  )

#+END_SRC

#+RESULTS:

