#+TITLE: Malnati's Faces Dotemacs 
#+AUTHOR: Ricardo Malnati
#+STARTUP: indent
#+STARTUP: hidestars
#+TODO: TODO CHECK AVOID
#+LANGUAGE: en

* Custom Code

#+BEGIN_SRC emacs-lisp

(message "\n It's the org-dotemacs set varialbles loading... \n")

(message "\nCustom set for which-key mode loading... \n") 
(custom-set-variables
        ;; WHICH-KEY custom-set-variables was added by Custom.
        ;;
        ;; which-key is a minor mode for Emacs that displays the key bindings 
        ;; following your currently entered incomplete command (a prefix) in a popup. 
        ;; For example, after enabling the minor mode if you enter C-x and wait 
        ;; for the default of 1 second the minibuffer will expand with all of the 
        ;; available key bindings that follow C-x (or as many as space allows given 
        ;; your settings). This includes prefixes like C-x 8 which are shown in a 
        ;; different face. Screenshots of what the popup will look like are included 
        ;; below. which-key started as a rewrite of guide-key-mode, but the feature 
        ;; sets have diverged to a certain extent.
        ;;
        ;; https://github.com/justbur/emacs-which-key
        '(which-key-mode t)
      ); custom-set-variables
      (message "Which key mode ON.") 

      (custom-set-variables
         ;; Side Window Right then Bottom
         ;; This is a combination of the previous two choices. It will try to use the 
         ;; right side, but if there is no room it will switch to using the bottom, 
         ;; which is usually easier to fit keys into. This setting can be helpful if 
         ;; the size of the Emacs frame changes frequently, which might be the case 
         ;; if you are using a dynamic/tiling window manager.
         '(which-key-setup-side-window-right-bottom)
       ); custom-set-variables
       (message "Which key window right or bottom ON.") 
       (message "\nCustom set for which-key mode done! \n") 

       (message "\nCustom set for deleting on selection loading...\n")
       (custom-set-variables
         ;; Delete Selection on Insert
         ;; Apr 12, 2013 | Editing • Bozhidar Batsov
         ;; It most text editors if you select a piece of text and 
         ;; press any key (that’s not bound to some command) the selection 
         ;; would be replaced by the character bound to the key (or 
         ;; deleted if you press Backspace). In Emacs things look 
         ;; differently - by default typed text is just inserted at point, 
         ;; regardless of any selection.
         ;; Of course, there is a way to change this: (delete-selection-mode +1)
         ;; Now when transient-mark-mode is also enabled (it is enabled by 
         ;; default since Emacs 23) any typed text replaces the selection 
         ;; if the selection is active.
         ;; https://emacsredux.com/blog/2013/04/12/delete-selection-on-insert/
         '(delete-selection-mode +1)
       ); custom-set-variables
       (message "delete-selection-mode ON!")
       (message "\nCustom set for deleting on selection done!\n")

       (message "\nFlycheck custom setup loading...\n") 
       (custom-set-variables
         '(global-flycheck-mode)
       ); custom-set-variables
       (message "Flycheck mode globally ON!")
       (message "\nFlycheck custom setup done!\n")

       (message "Yasnippet custom setup loading... \n") 
       (custom-set-variables
         '(yas-global-mode)
       ); custom-set-variables
       (message "Yasnippet mode globally ON!")
       (message "Yasnippet custom setup done! ")

       (message "global-company-mode custom setup loading... \n")
       (custom-set-variables
         '(add-hook 'after-init-hook 'global-company-mode)
       ); custom-set-variables
       (message "global-company-mode mode globally ON!")
       (message "global-company-mode custom setup done! ")    

       (message "aggressive-indent custom setup loading... \n") 
       (custom-set-variables
         (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
         (add-hook 'css-mode-hook #'aggressive-indent-mode)
       ); custom-set-variables
       (message "aggressive-indent for elip and CSS ON!")
       (message "aggressive-indent custom setup done! ")     

       (message "Saving custom setup loading... \n") 

       (setq emacsti-emacs-backupdir (concat emacsti-emacsdir "backups"))
       (message (concat "Eval global var emacsti-emacs-backupdir          → " emacsti-emacs-backupdir))
       (custom-set-variables
        '(desktop-save-mode t)
        '(desktop-base-file-name "emacs-desktop")
        '(desktop-save t)
       ); custom-set-variables
       ;; (message "Custom set for which-key done! \n")
       (message "Saving custom setup done! ")

       ;; (message "Basic edit custom setup loading... \n") 
       ;; (custom-set-variables

       ;; ); custom-set-variables
       ;; (message "Custom set for which-key done! \n")
       ;; (message "Basic edit custom setup done! ")


       ;; '(projectile-mode +1)
       ;; '(global-hl-line-sticky-flag t)
       ;; '(hl-line-sticky-flag nil)
       ;; '(indicate-empty-lines t)

       ;; '(mouse-wheel-scroll-amount (quote (3 ((shift) . 1) ((control)))))

       ;; '(org-mode t)
       ;; '(org-ascii-caption-above t)	      
       ;; '(org-confirm-babel-evaluate nil)
       ;; '(org-dotemacs-dependency-inheritance t)
       ;; '(org-dotemacs-exclude-todo "AVOID")
       ;; '(org-hide-block-startup t)
       ;; '(org-html-html5-fancy nil)
       ;; '(org-refile-allow-creating-parent-nodes (quote confirm))
       ;; '(org-refile-targets (quote ((org-agenda-files :level . 3))))
       ;; '(org-refile-use-outline-path (quote file))
       ;; '(org-startup-folded t)
       ;; '(org-startup-with-inline-images t)
       ;; '(define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
       ;; '(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
      ;; '(org-default-notes-file (concat org-directory emacsti-dotemacsfile-notes))

       #+END_SRC

#+RESULTS:
| global-company-mode | debian-ispell-set-default-dictionary | debian-ispell-set-startup-menu | x-wm-set-size-hint | table--make-cell-map |




